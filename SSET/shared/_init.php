<?php
require_once __DIR__ . '/../config.php';
require __DIR__ . '/../db.php';
require_once __DIR__ . '/../db-session.php';
// This is the first code called on ALL relevant pages,
// after config and functions - defines system wide settings!

//ADD CSP HEADER
 header("Content-Security-Policy: default-src 'self'; style-src 'self' fonts.googleapis.com; font-src 'self' fonts.gstatic.com;");


// Initialize options for more secure session handling...
ini_set('session.gc_maxlifetime', 86400);                 // Set max lifetime value to be 24 hours
ini_set('session.use_cookies','1');                 // Use cookies not URL parameters
ini_set('session.use_only_cookies','1');            // Force use of cookies and nothing else
ini_set('session.name','SSET');  // Set a unique cookie and session name
ini_set('session.cookie_lifetime','0');             // This is until the browser restarts by default
ini_set('session.cookie_path','/');                 // Specify the path the cookie is valid for
ini_set('session.use_trans_sid','0');               // Ensure this insecure feature is disabled.
ini_set('session.hash_function','sha512');          // Use Sha512 for session.
ini_set('session.hash_bits_per_character','6');     // Specify hash scheme of 0-9,a-v,A-Z,-,,
ini_set('session.use_strict_mode','1');             // Reject any session ID that was user provided and not generated by the session handler
ini_set('session.cookie_httponly','1');                    // Only allow non scripts access to the cookie
if (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') {
  ini_set('session.cookie_secure','1');          // Only allows access to session ID when protocol is HTTPS, switched on under 'if https' condition
}
// ini_set('referer_check','domain.tld');        // Specifies the referer that must be in use for session to be valid
// session_save_path('/sessions');               // Specify the directory we want to save session data to. This should be appropriately secured
// Start session with a @ to ignore creating any error notices for multiple starts within a page
$session = new DbSession($pdo);
// ====
// CSRF
// ====
// Set up a CSRF token, must be provided on every GET or POST request
if (!isset($_SESSION["csrf"])) {
  $code = uniqid('', true)."::".mt_rand();
  $salt = rand_string(64);
  $_SESSION["csrf"] = hashCSRFCode($code,$salt);
}
if ((!isset($csrfCheck) || $csrfCheck == true) && ($_GET || $_POST) && (!isset($_REQUEST["csrf"]) || $_REQUEST["csrf"] !== $_SESSION["csrf"])) {
  // Live runmode boot will boot user to /
  if (function_exists('throwMessage')) {
    throwMessage("Sorry, your session has timed out, so you have been logged out. Please log in again.","error");
  }
  if (runmode == "live") {
    header("Location: /");
  }
  // Else if the redirect fails or we're not live, show debug info
  $req = isset($_REQUEST["csrf"]) ? xssClean($_REQUEST["csrf"],"html") : "";
  die("Bad CSRF token...<br><br>
    CSRF issue:<br>
    REQUEST: ".$req."<br>
    SESSION: ".xssClean($_SESSION["csrf"],"html")."<br>
    FILE: ".xssClean($_SERVER["SCRIPT_NAME"],"html")."<br>".
      (runmode != "live"
        ? "
    GET: ".xssClean(var_export($_GET, true),"html")."<br>
    POST: ".xssClean(var_export($_POST, true),"html")
        : "")
  );
}

// ==============
// HASH CSRF CODE
// ==============
function hashCSRFCode($code,$salt) {
  $salted_hash = hash_hmac('sha256',$code.$salt,csrf_site_salt);
  return $salted_hash;
}

// ===========
// RAND STRING
// ============
function rand_string($length) {
  $str   = "";
  $chars = "abcdefghijklmanopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  $size  = strlen($chars);
  for($i=0; $i<$length; $i++) {
      $str .= $chars[mt_rand(0,$size-1)];
  }
  return $str;
}


// ================
// RENDER TEMPLATE
// ================
function renderTemplate($location, $viewObjects = []){
  ob_start();
    extract($viewObjects, EXTR_SKIP);
    require $location;
    $html = ob_get_contents();
  ob_end_clean();
  echo $html;
  return;
}


// ===
// XSS
// ===
// Replaces bad chars with good, well tested code written by an XSS guru!!
function xssClean($data,$type) {
  // === html ===
  if ($type == "html") {
    $bad  = array("<",    ">");
    $good = array("&lt;", "&gt;");
  }
  // === style ===
  if ($type == "style") {
    $bad  = array("<",    ">",    "\"",     "'",      "``",      "(",      ")",      "&",     "\\\\");
    $good = array("&lt;", "&gt;", "&quot;", "&apos;", "&grave;", "&lpar;", "&rpar;", "&amp;", "&bsol;");
  }
  // === attribute ===
  if ($type == "attribute") {
    $bad  = array("\"",     "'",      "``");
    $good = array("&quot;", "&apos;", "&grave;");
  }
  // === script ===
  if ($type == "script") {
    $bad  = array("<",    ">",    "\"",     "'",      "\\\\",   "%",        "&");
    $good = array("&lt;", "&gt;", "&quot;", "&apos;", "&bsol;", "&percnt;", "&amp;");
  }
  // === url ===
  if ($type == "url") {
    if(preg_match("#^(?:(?:https?|ftp):{1})\/\/[^\"\s\\\\]*.[^\"\s\\\\]*$#iu",(string)$data,$match)) {
      return $match[0];
    } else {
      return 'javascript:void(0)';
    }
 }
  $output = str_replace($bad, $good, $data);
  return $output;
}

 ?>
